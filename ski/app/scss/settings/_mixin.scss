@mixin fcc {
  display: flex;
  align-items: center;
  justify-content: center;
}

@mixin fcs {
  display: flex;
  align-items: center;
  justify-content: flex-start;
}

@mixin fss {
  display: flex;
  align-items: flex-start;
  justify-content: flex-start;
}

@mixin fes {
  display: flex;
  align-items: flex-end;
  justify-content: flex-start;
}

@mixin fce {
  display: flex;
  align-items: center;
  justify-content: flex-end;
}

@mixin fcsb {
  display: flex;
  align-items: center;
  justify-content: space-between;
}

@mixin fesb {
  display: flex;
  align-items: flex-end;
  justify-content: space-between;
}

@mixin fcsa {
  display: flex;
  align-items: center;
  justify-content: space-around;
}

@mixin fse {
  display: flex;
  align-items: flex-start;
  justify-content: flex-end;
}

@mixin fssb {
  display: flex;
  align-items: start;
  justify-content: space-between;
}

@mixin fes {
  display: flex;
  align-items: flex-end;
  justify-content: flex-start;
}

@mixin middleX {
  left: 50%;
  transform: translateX(-50%);
}

@mixin middleY {
  top: 50%;
  transform: translateY(-50%);
}

@mixin position($position, $args: ()) {
  $offsets: top right bottom left;

  position: $position;

  @each $offset in $offsets {
    $index: index($args, $offset);

    @if $index {
      @if $index == length($args) {
        #{$offset}: 0;
      } @else {
        $next: nth($args, $index + 1);

        @if is-valid-length($next) {
          #{$offset}: $next;
        } @else if index($offsets, $next) {
          #{$offset}: 0;
        } @else {
          @warn 'Invalid value #{$next} for offset #{$offset}';
        }
      }
    }
  }
}

@mixin absolute($args: ()) {
  @include position(absolute, $args);
}

@mixin fixed($args: ()) {
  @include position(fixed, $args);
}

@mixin relative($args: ()) {
  @include position(relative, $args);
}

@mixin sticky($args: ()) {
  @include position(sticky, $args);
}

@mixin sizeBoth($width, $height: $width) {
  width: $width;
  height: $height;
}

@mixin size($width, $height) {
  width: $width;
  height: $height;
}

@mixin transition4 {
  transition: all 0.4s ease;
}

@mixin backgroundPicture {
  @include absolute(top 0 left 0 right 0 bottom 0);

  background-position: 50%;
  background-repeat: no-repeat;
  background-size: cover;
  height: 100%;
  width: 100%;
}

@function breakpoint-next(
  $name,
  $breakpoints: $grid-breakpoints,
  $breakpoint-names: map-keys($breakpoints)
) {
  $n: index($breakpoint-names, $name);
  @return if(
    $n != null and $n < length($breakpoint-names),
    nth($breakpoint-names, $n + 1),
    null
  );
}

@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
  $min: map-get($breakpoints, $name);
  @return if($min != 0, $min, null);
}

@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {
  $next: breakpoint-next($name, $breakpoints);
  @return if($next, breakpoint-min($next, $breakpoints) - 0.02, null);
}

@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {
  @return if(breakpoint-min($name, $breakpoints) == null, "", "-#{$name}");
}

$grid-breakpoints: (
  xs: 0,
  sm: 576px,
  md: 768px,
  lg: 1024px,
  xl: 1720px
);

@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
  $min: breakpoint-min($name, $breakpoints);
  @if $min {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}

@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {
  $max: breakpoint-max($name, $breakpoints);
  @if $max {
    @media (max-width: $max) {
      @content;
    }
  } @else {
    @content;
  }
}

@mixin media-breakpoint-between(
  $lower,
  $upper,
  $breakpoints: $grid-breakpoints
) {
  $min: breakpoint-min($lower, $breakpoints);
  $max: breakpoint-max($upper, $breakpoints);

  @if $min != null and $max != null {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else if $max == null {
    @include media-breakpoint-up($lower, $breakpoints) {
      @content;
    }
  } @else if $min == null {
    @include media-breakpoint-down($upper, $breakpoints) {
      @content;
    }
  }
}

@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {
  $min: breakpoint-min($name, $breakpoints);
  $max: breakpoint-max($name, $breakpoints);

  @if $min != null and $max != null {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else if $max == null {
    @include media-breakpoint-up($name, $breakpoints) {
      @content;
    }
  } @else if $min == null {
    @include media-breakpoint-down($name, $breakpoints) {
      @content;
    }
  }
}
